/******************************************************************* 
 * Header file generated by Protoc for Embedded C.                 *
 * Version 0.2 (2012-01-31)                                        *
 *                                                                 *
 * Copyright (c) 2009-2012                                         *
 * Technische Universitaet Muenchen                                *
 * http://www4.in.tum.de/                                          *
 *                                                                 *
 * Source : chat.proto
 * Package: 
 *                                                                 *
 * Do not edit.                                                    *
 *******************************************************************/

#ifndef __CHAT_H__
#define __CHAT_H__

#define MAX_REPEATED_LEN 127
#define MAX_STRING_LEN 127
#define MAX_BYTES_LEN 32

/*******************************************************************
 * General functions
 *******************************************************************/

/*
 * returns the size of a length delimited message which also 
 * contains the first bytes for the length encoding.
 */
unsigned long Message_get_delimited_size(void *_buffer, int offset);

/*
 * Tests whether a message can be completely read from the given buffer at
 * the offset. The bytes [offset..offset+length-1] are interpreted.
 *
 * Returns 1 (true) if buffer[offset..offset+length-1] contains a complete
 * message or 0 (false) otherwise.
 */
int Message_can_read_delimited_from(void *_buffer, int offset, int length);


/*******************************************************************
 * Message: chat.proto, line 9
 *******************************************************************/

/* Maximum size of a serialized ID-message, useful for buffer allocation. */
#define MAX_ID_SIZE 17


/*******************************************************************
 * Enumeration: chat.proto, line 4
 *******************************************************************/
enum Kind {
  _PEOPLE_ID = 0,
  _GROUP_ID = 1
};

/* Structure that holds a deserialized ID-message. */
struct ID {
  enum Kind _type;
  signed long _key;
};
/*
 * Serialize a ID-message into the given buffer at offset and return
 * new offset for optional next message.
 */
int ID_write_delimited_to(struct ID *_ID, void *_buffer, int offset);

/*
 * Serialize a ID-message together with its tag into the given buffer 
 * at offset and return new offset for optional next message.
 * Is useful if a ID-message is embedded in another message.
 */
int ID_write_with_tag(struct ID *_ID, void *_buffer, int offset, int tag);

/*
 * Deserialize a ID-message from the given buffer at offset and return
 * new offset for optional next message.
 *
 * Note: All fields in _ID will be reset to 0 before _buffer is interpreted.
 */
int ID_read_delimited_from(void *_buffer, struct ID *_ID, int offset);


/*******************************************************************
 * Message: chat.proto, line 14
 *******************************************************************/

/* Maximum size of a serialized MSG-message, useful for buffer allocation. */
#define MAX_MSG_SIZE 132

/* Structure that holds a deserialized MSG-message. */
struct MSG {
  int _msg_len;
  char _msg[MAX_STRING_LEN];
};
/*
 * Serialize a MSG-message into the given buffer at offset and return
 * new offset for optional next message.
 */
int MSG_write_delimited_to(struct MSG *_MSG, void *_buffer, int offset);

/*
 * Serialize a MSG-message together with its tag into the given buffer 
 * at offset and return new offset for optional next message.
 * Is useful if a MSG-message is embedded in another message.
 */
int MSG_write_with_tag(struct MSG *_MSG, void *_buffer, int offset, int tag);

/*
 * Deserialize a MSG-message from the given buffer at offset and return
 * new offset for optional next message.
 *
 * Note: All fields in _MSG will be reset to 0 before _buffer is interpreted.
 */
int MSG_read_delimited_from(void *_buffer, struct MSG *_MSG, int offset);



/*******************************************************************
 * Message: chat.proto, line 18
 *******************************************************************/

/* Maximum size of a serialized Talk-message, useful for buffer allocation. */
#define MAX_Talk_SIZE 11

/* Structure that holds a deserialized Talk-message. */
struct Talk {
  struct ID _from_id;
  struct ID _to_id;
  struct MSG _say;
};
/*
 * Serialize a Talk-message into the given buffer at offset and return
 * new offset for optional next message.
 */
int Talk_write_delimited_to(struct Talk *_Talk, void *_buffer, int offset);

/*
 * Serialize a Talk-message together with its tag into the given buffer 
 * at offset and return new offset for optional next message.
 * Is useful if a Talk-message is embedded in another message.
 */
int Talk_write_with_tag(struct Talk *_Talk, void *_buffer, int offset, int tag);

/*
 * Deserialize a Talk-message from the given buffer at offset and return
 * new offset for optional next message.
 *
 * Note: All fields in _Talk will be reset to 0 before _buffer is interpreted.
 */
int Talk_read_delimited_from(void *_buffer, struct Talk *_Talk, int offset);


#endif
