// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Proto.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	Proto.proto

It has these top-level messages:
	ReqLogin
	RepLogin
	ReqRegister
	RepRegister
	ReqMatch
	RepMatch
	ReqKeyValue
	RepKeyValue
	Req
	Rep
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type ReqLogin struct {
	Sn     uint32 `protobuf:"varint,1,opt,name=Sn" json:"Sn,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Passwd string `protobuf:"bytes,3,opt,name=Passwd" json:"Passwd,omitempty"`
}

func (m *ReqLogin) Reset()                    { *m = ReqLogin{} }
func (m *ReqLogin) String() string            { return proto1.CompactTextString(m) }
func (*ReqLogin) ProtoMessage()               {}
func (*ReqLogin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ReqLogin) GetSn() uint32 {
	if m != nil {
		return m.Sn
	}
	return 0
}

func (m *ReqLogin) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReqLogin) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

type RepLogin struct {
	Sn  uint32 `protobuf:"varint,1,opt,name=Sn" json:"Sn,omitempty"`
	Ret string `protobuf:"bytes,2,opt,name=Ret" json:"Ret,omitempty"`
	Msg string `protobuf:"bytes,3,opt,name=Msg" json:"Msg,omitempty"`
	Id  string `protobuf:"bytes,4,opt,name=Id" json:"Id,omitempty"`
}

func (m *RepLogin) Reset()                    { *m = RepLogin{} }
func (m *RepLogin) String() string            { return proto1.CompactTextString(m) }
func (*RepLogin) ProtoMessage()               {}
func (*RepLogin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RepLogin) GetSn() uint32 {
	if m != nil {
		return m.Sn
	}
	return 0
}

func (m *RepLogin) GetRet() string {
	if m != nil {
		return m.Ret
	}
	return ""
}

func (m *RepLogin) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *RepLogin) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ReqRegister struct {
	Sn     uint32 `protobuf:"varint,1,opt,name=Sn" json:"Sn,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Passwd string `protobuf:"bytes,3,opt,name=Passwd" json:"Passwd,omitempty"`
}

func (m *ReqRegister) Reset()                    { *m = ReqRegister{} }
func (m *ReqRegister) String() string            { return proto1.CompactTextString(m) }
func (*ReqRegister) ProtoMessage()               {}
func (*ReqRegister) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ReqRegister) GetSn() uint32 {
	if m != nil {
		return m.Sn
	}
	return 0
}

func (m *ReqRegister) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReqRegister) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

type RepRegister struct {
	Sn  uint32 `protobuf:"varint,1,opt,name=Sn" json:"Sn,omitempty"`
	Ret string `protobuf:"bytes,2,opt,name=Ret" json:"Ret,omitempty"`
	Msg string `protobuf:"bytes,3,opt,name=Msg" json:"Msg,omitempty"`
	Id  string `protobuf:"bytes,4,opt,name=Id" json:"Id,omitempty"`
}

func (m *RepRegister) Reset()                    { *m = RepRegister{} }
func (m *RepRegister) String() string            { return proto1.CompactTextString(m) }
func (*RepRegister) ProtoMessage()               {}
func (*RepRegister) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RepRegister) GetSn() uint32 {
	if m != nil {
		return m.Sn
	}
	return 0
}

func (m *RepRegister) GetRet() string {
	if m != nil {
		return m.Ret
	}
	return ""
}

func (m *RepRegister) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *RepRegister) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ReqMatch struct {
	Sn uint32 `protobuf:"varint,1,opt,name=Sn" json:"Sn,omitempty"`
	Id string `protobuf:"bytes,2,opt,name=Id" json:"Id,omitempty"`
}

func (m *ReqMatch) Reset()                    { *m = ReqMatch{} }
func (m *ReqMatch) String() string            { return proto1.CompactTextString(m) }
func (*ReqMatch) ProtoMessage()               {}
func (*ReqMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReqMatch) GetSn() uint32 {
	if m != nil {
		return m.Sn
	}
	return 0
}

func (m *ReqMatch) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RepMatch struct {
	Sn   uint32 `protobuf:"varint,1,opt,name=Sn" json:"Sn,omitempty"`
	Ret  string `protobuf:"bytes,2,opt,name=Ret" json:"Ret,omitempty"`
	Msg  string `protobuf:"bytes,3,opt,name=Msg" json:"Msg,omitempty"`
	Data string `protobuf:"bytes,4,opt,name=Data" json:"Data,omitempty"`
}

func (m *RepMatch) Reset()                    { *m = RepMatch{} }
func (m *RepMatch) String() string            { return proto1.CompactTextString(m) }
func (*RepMatch) ProtoMessage()               {}
func (*RepMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RepMatch) GetSn() uint32 {
	if m != nil {
		return m.Sn
	}
	return 0
}

func (m *RepMatch) GetRet() string {
	if m != nil {
		return m.Ret
	}
	return ""
}

func (m *RepMatch) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *RepMatch) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type ReqKeyValue struct {
	Sn   uint32 `protobuf:"varint,1,opt,name=Sn" json:"Sn,omitempty"`
	Key  string `protobuf:"bytes,2,opt,name=Key" json:"Key,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=Data" json:"Data,omitempty"`
}

func (m *ReqKeyValue) Reset()                    { *m = ReqKeyValue{} }
func (m *ReqKeyValue) String() string            { return proto1.CompactTextString(m) }
func (*ReqKeyValue) ProtoMessage()               {}
func (*ReqKeyValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ReqKeyValue) GetSn() uint32 {
	if m != nil {
		return m.Sn
	}
	return 0
}

func (m *ReqKeyValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ReqKeyValue) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type RepKeyValue struct {
	Sn   uint32 `protobuf:"varint,1,opt,name=Sn" json:"Sn,omitempty"`
	Ret  string `protobuf:"bytes,2,opt,name=Ret" json:"Ret,omitempty"`
	Msg  string `protobuf:"bytes,3,opt,name=Msg" json:"Msg,omitempty"`
	Data string `protobuf:"bytes,4,opt,name=Data" json:"Data,omitempty"`
}

func (m *RepKeyValue) Reset()                    { *m = RepKeyValue{} }
func (m *RepKeyValue) String() string            { return proto1.CompactTextString(m) }
func (*RepKeyValue) ProtoMessage()               {}
func (*RepKeyValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RepKeyValue) GetSn() uint32 {
	if m != nil {
		return m.Sn
	}
	return 0
}

func (m *RepKeyValue) GetRet() string {
	if m != nil {
		return m.Ret
	}
	return ""
}

func (m *RepKeyValue) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *RepKeyValue) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type Req struct {
	Sn   uint32 `protobuf:"varint,1,opt,name=Sn" json:"Sn,omitempty"`
	Key  string `protobuf:"bytes,2,opt,name=Key" json:"Key,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=Data" json:"Data,omitempty"`
}

func (m *Req) Reset()                    { *m = Req{} }
func (m *Req) String() string            { return proto1.CompactTextString(m) }
func (*Req) ProtoMessage()               {}
func (*Req) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Req) GetSn() uint32 {
	if m != nil {
		return m.Sn
	}
	return 0
}

func (m *Req) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Req) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type Rep struct {
	Sn   uint32 `protobuf:"varint,1,opt,name=Sn" json:"Sn,omitempty"`
	Ret  string `protobuf:"bytes,2,opt,name=Ret" json:"Ret,omitempty"`
	Msg  string `protobuf:"bytes,3,opt,name=Msg" json:"Msg,omitempty"`
	Data string `protobuf:"bytes,4,opt,name=Data" json:"Data,omitempty"`
}

func (m *Rep) Reset()                    { *m = Rep{} }
func (m *Rep) String() string            { return proto1.CompactTextString(m) }
func (*Rep) ProtoMessage()               {}
func (*Rep) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Rep) GetSn() uint32 {
	if m != nil {
		return m.Sn
	}
	return 0
}

func (m *Rep) GetRet() string {
	if m != nil {
		return m.Ret
	}
	return ""
}

func (m *Rep) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Rep) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto1.RegisterType((*ReqLogin)(nil), "proto.ReqLogin")
	proto1.RegisterType((*RepLogin)(nil), "proto.RepLogin")
	proto1.RegisterType((*ReqRegister)(nil), "proto.ReqRegister")
	proto1.RegisterType((*RepRegister)(nil), "proto.RepRegister")
	proto1.RegisterType((*ReqMatch)(nil), "proto.ReqMatch")
	proto1.RegisterType((*RepMatch)(nil), "proto.RepMatch")
	proto1.RegisterType((*ReqKeyValue)(nil), "proto.ReqKeyValue")
	proto1.RegisterType((*RepKeyValue)(nil), "proto.RepKeyValue")
	proto1.RegisterType((*Req)(nil), "proto.Req")
	proto1.RegisterType((*Rep)(nil), "proto.Rep")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for User service

type UserClient interface {
	Login(ctx context.Context, in *ReqLogin, opts ...grpc.CallOption) (*RepLogin, error)
	Register(ctx context.Context, in *ReqRegister, opts ...grpc.CallOption) (*RepRegister, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) Login(ctx context.Context, in *ReqLogin, opts ...grpc.CallOption) (*RepLogin, error) {
	out := new(RepLogin)
	err := grpc.Invoke(ctx, "/proto.User/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Register(ctx context.Context, in *ReqRegister, opts ...grpc.CallOption) (*RepRegister, error) {
	out := new(RepRegister)
	err := grpc.Invoke(ctx, "/proto.User/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserServer interface {
	Login(context.Context, *ReqLogin) (*RepLogin, error)
	Register(context.Context, *ReqRegister) (*RepRegister, error)
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.User/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Login(ctx, req.(*ReqLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRegister)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.User/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Register(ctx, req.(*ReqRegister))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _User_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _User_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Proto.proto",
}

// Client API for Scene service

type SceneClient interface {
	Get(ctx context.Context, in *ReqKeyValue, opts ...grpc.CallOption) (*RepKeyValue, error)
	Set(ctx context.Context, in *ReqKeyValue, opts ...grpc.CallOption) (*Rep, error)
}

type sceneClient struct {
	cc *grpc.ClientConn
}

func NewSceneClient(cc *grpc.ClientConn) SceneClient {
	return &sceneClient{cc}
}

func (c *sceneClient) Get(ctx context.Context, in *ReqKeyValue, opts ...grpc.CallOption) (*RepKeyValue, error) {
	out := new(RepKeyValue)
	err := grpc.Invoke(ctx, "/proto.Scene/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneClient) Set(ctx context.Context, in *ReqKeyValue, opts ...grpc.CallOption) (*Rep, error) {
	out := new(Rep)
	err := grpc.Invoke(ctx, "/proto.Scene/Set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Scene service

type SceneServer interface {
	Get(context.Context, *ReqKeyValue) (*RepKeyValue, error)
	Set(context.Context, *ReqKeyValue) (*Rep, error)
}

func RegisterSceneServer(s *grpc.Server, srv SceneServer) {
	s.RegisterService(&_Scene_serviceDesc, srv)
}

func _Scene_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqKeyValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Scene/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneServer).Get(ctx, req.(*ReqKeyValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scene_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqKeyValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Scene/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneServer).Set(ctx, req.(*ReqKeyValue))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scene_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Scene",
	HandlerType: (*SceneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Scene_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Scene_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Proto.proto",
}

// Client API for Cards service

type CardsClient interface {
	Get(ctx context.Context, in *ReqKeyValue, opts ...grpc.CallOption) (*RepKeyValue, error)
	Set(ctx context.Context, in *ReqKeyValue, opts ...grpc.CallOption) (*Rep, error)
}

type cardsClient struct {
	cc *grpc.ClientConn
}

func NewCardsClient(cc *grpc.ClientConn) CardsClient {
	return &cardsClient{cc}
}

func (c *cardsClient) Get(ctx context.Context, in *ReqKeyValue, opts ...grpc.CallOption) (*RepKeyValue, error) {
	out := new(RepKeyValue)
	err := grpc.Invoke(ctx, "/proto.Cards/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardsClient) Set(ctx context.Context, in *ReqKeyValue, opts ...grpc.CallOption) (*Rep, error) {
	out := new(Rep)
	err := grpc.Invoke(ctx, "/proto.Cards/Set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cards service

type CardsServer interface {
	Get(context.Context, *ReqKeyValue) (*RepKeyValue, error)
	Set(context.Context, *ReqKeyValue) (*Rep, error)
}

func RegisterCardsServer(s *grpc.Server, srv CardsServer) {
	s.RegisterService(&_Cards_serviceDesc, srv)
}

func _Cards_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqKeyValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Cards/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardsServer).Get(ctx, req.(*ReqKeyValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cards_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqKeyValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardsServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Cards/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardsServer).Set(ctx, req.(*ReqKeyValue))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cards_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Cards",
	HandlerType: (*CardsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Cards_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Cards_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Proto.proto",
}

// Client API for Pk service

type PkClient interface {
	Match(ctx context.Context, in *ReqMatch, opts ...grpc.CallOption) (*RepMatch, error)
}

type pkClient struct {
	cc *grpc.ClientConn
}

func NewPkClient(cc *grpc.ClientConn) PkClient {
	return &pkClient{cc}
}

func (c *pkClient) Match(ctx context.Context, in *ReqMatch, opts ...grpc.CallOption) (*RepMatch, error) {
	out := new(RepMatch)
	err := grpc.Invoke(ctx, "/proto.Pk/Match", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Pk service

type PkServer interface {
	Match(context.Context, *ReqMatch) (*RepMatch, error)
}

func RegisterPkServer(s *grpc.Server, srv PkServer) {
	s.RegisterService(&_Pk_serviceDesc, srv)
}

func _Pk_Match_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PkServer).Match(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Pk/Match",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PkServer).Match(ctx, req.(*ReqMatch))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pk_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Pk",
	HandlerType: (*PkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Match",
			Handler:    _Pk_Match_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Proto.proto",
}

// Client API for Stream service

type StreamClient interface {
	Pipe(ctx context.Context, opts ...grpc.CallOption) (Stream_PipeClient, error)
}

type streamClient struct {
	cc *grpc.ClientConn
}

func NewStreamClient(cc *grpc.ClientConn) StreamClient {
	return &streamClient{cc}
}

func (c *streamClient) Pipe(ctx context.Context, opts ...grpc.CallOption) (Stream_PipeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Stream_serviceDesc.Streams[0], c.cc, "/proto.Stream/Pipe", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamPipeClient{stream}
	return x, nil
}

type Stream_PipeClient interface {
	Send(*Req) error
	Recv() (*Rep, error)
	grpc.ClientStream
}

type streamPipeClient struct {
	grpc.ClientStream
}

func (x *streamPipeClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamPipeClient) Recv() (*Rep, error) {
	m := new(Rep)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Stream service

type StreamServer interface {
	Pipe(Stream_PipeServer) error
}

func RegisterStreamServer(s *grpc.Server, srv StreamServer) {
	s.RegisterService(&_Stream_serviceDesc, srv)
}

func _Stream_Pipe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).Pipe(&streamPipeServer{stream})
}

type Stream_PipeServer interface {
	Send(*Rep) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type streamPipeServer struct {
	grpc.ServerStream
}

func (x *streamPipeServer) Send(m *Rep) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamPipeServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Stream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Stream",
	HandlerType: (*StreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pipe",
			Handler:       _Stream_Pipe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "Proto.proto",
}

func init() { proto1.RegisterFile("Proto.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0xcd, 0x4b, 0xf3, 0x40,
	0x10, 0xc6, 0xf3, 0xd5, 0xf2, 0xbe, 0x53, 0xde, 0x0f, 0xe6, 0x20, 0xa1, 0xa7, 0xb2, 0x08, 0x16,
	0x85, 0xaa, 0xd5, 0x9b, 0xc7, 0x8a, 0x52, 0x6a, 0x4b, 0xdc, 0x50, 0xef, 0x6b, 0x33, 0xd4, 0xa0,
	0x4d, 0xf3, 0xb1, 0x22, 0xfd, 0xef, 0x65, 0x37, 0x49, 0x13, 0xb1, 0x15, 0xa9, 0x7a, 0x49, 0x26,
	0x0f, 0x33, 0xbf, 0x19, 0x9e, 0x3c, 0xd0, 0xf2, 0xd2, 0xa5, 0x5c, 0xf6, 0x62, 0xf5, 0xc4, 0x86,
	0x7e, 0xb1, 0x2b, 0xf8, 0xc5, 0x29, 0xb9, 0x59, 0xce, 0xc3, 0x08, 0xff, 0x82, 0xe5, 0x47, 0xae,
	0xd9, 0x31, 0xbb, 0x7f, 0xb8, 0xe5, 0x47, 0x88, 0xe0, 0x4c, 0xc4, 0x82, 0x5c, 0xab, 0x63, 0x76,
	0x7f, 0x73, 0x5d, 0xe3, 0x1e, 0x34, 0x3d, 0x91, 0x65, 0x2f, 0x81, 0x6b, 0x6b, 0xb5, 0xf8, 0x62,
	0x13, 0xc5, 0x89, 0x37, 0x73, 0xfe, 0x83, 0xcd, 0x49, 0x16, 0x18, 0x55, 0x2a, 0x65, 0x9c, 0xcd,
	0x0b, 0x84, 0x2a, 0xd5, 0xcc, 0x30, 0x70, 0x1d, 0x2d, 0x58, 0xc3, 0x80, 0x0d, 0xa1, 0xc5, 0x29,
	0xe1, 0x34, 0x0f, 0x33, 0x49, 0xe9, 0x97, 0x4e, 0xbb, 0x55, 0xa8, 0x78, 0x2b, 0x6a, 0x97, 0xeb,
	0x0e, 0xb5, 0x6b, 0x63, 0x21, 0x67, 0x0f, 0xef, 0x78, 0x79, 0xaf, 0xb5, 0xee, 0xe5, 0xda, 0x99,
	0xcd, 0xbd, 0x9f, 0xd9, 0x8d, 0xe0, 0x5c, 0x0a, 0x29, 0x8a, 0xed, 0xba, 0x66, 0x03, 0xed, 0xce,
	0x88, 0x56, 0x77, 0xe2, 0xe9, 0x99, 0x36, 0x61, 0x47, 0xb4, 0x2a, 0xb1, 0x23, 0x5a, 0xad, 0x21,
	0x76, 0x0d, 0x32, 0xd5, 0xbe, 0x7c, 0x04, 0xd9, 0xe9, 0xb6, 0x0b, 0x35, 0x97, 0xec, 0x78, 0xd3,
	0x58, 0x0d, 0xc7, 0xdf, 0x75, 0x4b, 0x3f, 0x04, 0x67, 0x9a, 0x51, 0x8a, 0x47, 0xd0, 0xc8, 0xa3,
	0xf9, 0x2f, 0x4f, 0x7f, 0xaf, 0xcc, 0x7c, 0xbb, 0x12, 0xf2, 0xf0, 0x32, 0x03, 0xcf, 0xd5, 0x0f,
	0x2b, 0xc2, 0x82, 0x55, 0x7f, 0xa9, 0xb5, 0x2b, 0x6d, 0x1d, 0x2a, 0x66, 0xf4, 0x05, 0x34, 0xfc,
	0x19, 0x45, 0x84, 0xc7, 0x60, 0x5f, 0x93, 0xac, 0x4f, 0x96, 0x16, 0xd7, 0x27, 0x4b, 0x8d, 0x19,
	0x78, 0x00, 0xb6, 0xbf, 0x65, 0x00, 0xaa, 0x81, 0x7c, 0xc5, 0x40, 0xa4, 0x41, 0xf6, 0x83, 0x2b,
	0x4e, 0xc1, 0xf2, 0x1e, 0x95, 0x5d, 0x79, 0x5e, 0x6b, 0x76, 0x69, 0xa1, 0x6e, 0x97, 0x16, 0x98,
	0xd1, 0xef, 0x41, 0xd3, 0x97, 0x29, 0x89, 0x05, 0xee, 0x83, 0xe3, 0x85, 0x31, 0x61, 0x85, 0x4c,
	0xde, 0xe2, 0xbb, 0xe6, 0x89, 0x79, 0xdf, 0xd4, 0xc2, 0xd9, 0x6b, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x0d, 0x29, 0x8c, 0x4e, 0x8e, 0x04, 0x00, 0x00,
}
