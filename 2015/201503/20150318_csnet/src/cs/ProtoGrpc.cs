// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Proto.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Proto {
  public static partial class User
  {
    static readonly string __ServiceName = "Proto.User";

    static readonly grpc::Marshaller<global::Proto.ReqLogin> __Marshaller_ReqLogin = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.ReqLogin.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.RepLogin> __Marshaller_RepLogin = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.RepLogin.Parser.ParseFrom);

    static readonly grpc::Method<global::Proto.ReqLogin, global::Proto.RepLogin> __Method_Login = new grpc::Method<global::Proto.ReqLogin, global::Proto.RepLogin>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Login",
        __Marshaller_ReqLogin,
        __Marshaller_RepLogin);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Proto.ProtoReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of User</summary>
    public abstract partial class UserBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Proto.RepLogin> Login(global::Proto.ReqLogin request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for User</summary>
    public partial class UserClient : grpc::ClientBase<UserClient>
    {
      /// <summary>Creates a new client for User</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public UserClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for User that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public UserClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected UserClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected UserClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Proto.RepLogin Login(global::Proto.ReqLogin request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Login(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Proto.RepLogin Login(global::Proto.ReqLogin request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Login, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.RepLogin> LoginAsync(global::Proto.ReqLogin request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LoginAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.RepLogin> LoginAsync(global::Proto.ReqLogin request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Login, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override UserClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new UserClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(UserBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Login, serviceImpl.Login).Build();
    }

  }
}
#endregion
